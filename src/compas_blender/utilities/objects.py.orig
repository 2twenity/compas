"""compas_blender.utilities.objects : Selecting or editing of Blender objects."""

try:
    import bpy
except ImportError:
    pass


__author__     = ['Andrew Liew <liew@arch.ethz.ch>']
__copyright__  = 'Copyright 2016, Block Research Group - ETH Zurich'
__license__    = 'MIT License'
__email__      = 'liew@arch.ethz.ch'


__all__ = [
    'delete_objects',
    'delete_all_objects',
    'get_objects_by_layer',
    'get_objects_names',
    'set_objects_layer',
    'set_objects_name_show',
    'set_objects_locations',
    'set_objects_rotations',
    'set_objects_scales',
    'join_objects',
    'select_objects',
    'select_objects_by_layer',
    'select_objects_all',
    'select_objects_none',
]


# ==============================================================================
# Deleting
# ==============================================================================

def delete_objects(objects):
    """ Delete a list of objects.

    Parameters:
        objects (list): Objects to delete.

    Returns:
        None
    """
    if not isinstance(objects, list):
        objects = list(objects)
    select_objects(objects)
    bpy.ops.object.delete()


def delete_all_objects():
    """ Delete all scene objects.

    Parameters:
        None

    Returns:
        None
    """
    select_objects_all()
    bpy.ops.object.delete()


# ==============================================================================
# Get
# ==============================================================================

def get_objects_by_layer(layer, names=False):
    """ Retrieves the objects on a given layer.

    Parameters:
        layer (int): Layer number.
        names (bool): Return object names.

    Returns:
        list: Objects in the layer.
        list: Object names in the layer.
    """
    objects = [object for object in bpy.context.scene.objects if object.layers[layer]]
    object_names = [object.name for object in objects]
    if names:
        return objects, object_names
    return objects


def get_objects_names(objects):
    """ Retrieves the names of objects.

    Parameters:
        objects (list): Objects to get names of.

    Returns:
        list: Object names.
    """
    object_names = [object.name for object in objects]
    return object_names


def get_points():
    raise NotImplementedError


def get_curves():
    raise NotImplementedError


def get_meshes():
    raise NotImplementedError


def get_surfaces():
    raise NotImplementedError


def get_objects_locations():
    raise NotImplementedError


# ==============================================================================
# Select
# ==============================================================================

def select_objects(objects):
    """ Select specific objects.

    Parameters:
        objects (obj): Objects to select.

    Returns:
        None
    """
    select_objects_none()
    for object in objects:
        object.select = True


def select_objects_by_layer(layer):
    """ Select all objects in a given layer.

    Parameters:
        layer (int): Layer number.

    Returns:
        None
    """
    select_objects_none()
    objects = get_objects_by_layer(layer)
    select_objects(objects)


def select_objects_all():
    """ Select all scene objects.

    Parameters:
        None

    Returns:
        list: All scene objects.
    """
    objects = bpy.context.scene.objects
    select_objects(objects)
    return objects


def select_objects_none():
    """ Deselect all scene objects.

    Parameters:
        None

    Returns:
        None
    """
    objects = bpy.context.scene.objects
    for object in objects:
        object.select = False


def select_points():
    raise NotImplementedError


def select_curves():
    raise NotImplementedError


def select_meshes():
    raise NotImplementedError


def select_surfaces():
    raise NotImplementedError


# ==============================================================================
# Set attributes
# ==============================================================================

def set_objects_layer(objects, layer):
    """ Changes the layer of the objects.

    Parameters:
        objects (list): Objects whose layer to change.
        layer (int): Layer number.

    Returns:
        None
    """
    mask = tuple(i == layer for i in range(20))
    for object in objects:
        object.layers = mask


def set_objects_name_show(objects, show=True):
    """ Display the name of objects.

    Parameters:
        objects (list): Objects to display name.
        show (bool): True or False.

    Returns:
        None
    """
    if not isinstance(objects, list):
        objects = list(objects)
    for object in objects:
        object.show_name = show


def set_objects_locations(objects, locations):
    """ Set the locations of objects.

    Parameters:
        objects (list): Objects to set location.
        locations (list): List of locations.

    Returns:
        None
    """
    if not isinstance(objects, list):
        objects = list(objects)
    for i in range(len(objects)):
        objects[i].location = locations[i]


def set_objects_rotations(objects, rotations):
    """ Set the rotations of objects.

    Parameters:
        objects (list): Objects to set rotation.
        rotations (list): List of rotations.

    Returns:
        None
    """
    if not isinstance(objects, list):
        objects = list(objects)
    for i in range(len(objects)):
        objects[i].rotation_euler = rotations[i]


def set_objects_scales(objects, scales):
    """ Set the scales of objects.

    Parameters:
        objects (list): Objects to set scale.
        scales (list): List of scales.

    Returns:
        None
    """
    if not isinstance(objects, list):
        objects = list(objects)
    for i in range(len(objects)):
        objects[i].scale = scales[i]


# ==============================================================================
# Misc
# ==============================================================================

def join_objects(objects):
    """ Join a list of objects.

    Parameters:
        objects (list): Objects to join.

    Returns:
        obj: Joined object.
    """
    if not isinstance(objects, list):
        objects = list(objects)
    select_objects(objects)
    bpy.context.scene.objects.active = objects[0]
    bpy.ops.object.join()
    return objects[0]


# ==============================================================================
# Debugging
# ==============================================================================

if __name__ == "__main__":

    objects = get_objects_by_layer(layer=0)
    print(get_objects_names(objects))
